1, 2

4/1,2 = 1 + 1 + 1 + 1, 1 + 1 + 2, 2 + 2		 => 3
3/1,2 = 1 + 1 + 1, 1 + 2   			 => 2
2/1,2 = 1 + 1, 2				 => 2
1/1,2 = 1					 => 1


4/1,2 = 1 + 1 + 1 + 1, 1 + 1 + 2, 2 + 2		 => 3

4/1 => 1
2/1,2 => (1
2/1 => 1
0/1,2 => 
0/1 = 1

2/1,2 = 1 + 1

4/1 = 1 + 1 + 1 + 1
=> while(


1 2 4

12 => test(12, 1) + test(11, (1, 2, 4))

12 = 12 * 1    10 * 1 + 2   8 * 1 + 2 * 2    6 * 1 + 3 * 2

1



4/1,2,3 = 1 1 1 1 | 1 1 2 | 2 2 | 1 3 

f(4, 1) = 1
f(4-2, 1) = 1
f(4-2*2, 1) = 1
f(4-3, 1) = 1
f(4-3, 2) = 0

5/1,2,3 = 1 1 1 1 1 | 1 1 1 2 | 1 2 2 | 1 1 3 | 2 3

    assert(countChange(300,List(500,5,50,100,20,200,10)) === 1022)

5/1,2,3 = test(5, 1) +                                    | 1 1 1 1 1
            test(4, 2) + test(3, 2) + test(2, 2) +        | 1 2 2 | 1 1 1 2
            test(4, 3) + test(3, 3) +                     | 1 1 3
            test(3, 3) +                                  | 2 3
            test(2, 3)


pour chaque coin
 test(money, coin)
 tant que money >= coin[+1]
   test(money - coin, coin[+1]


6/2,3,4 = 2 2 2 | 2 4 | 3 3

3/1,2 = 1 1 1 | 1 2
       test(3, 1) +                  | 1 1 1
       test(2, 2) +                  | 1 2
       test(1, 2)

5/1,2,3 = test(5, 1) +                       | 1 1 1 1 1
           test(4, 2) + test(4, 3) +         | 1 2 2
           test(3, 2) + test(3, 3) +         | 1 1 3
           test(2, 2) +                      | 1 1 1 2
           test(5, 2) +
           test(3, 3)                        | 2 3
           test(5, 3)
           test(2, 3)

5/1,2,3 = 

